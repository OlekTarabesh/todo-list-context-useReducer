{"ast":null,"code":"var _jsxFileName = \"/Users/olek/Desktop/Coding/todo-list-with-context/src/contexts/todo-app.context.tsx\",\n  _s = $RefreshSig$();\nimport { createContext, useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// type TodoAppContextType = {\n//     tasks: Array<TaskType>;\n//     setTasks: () => void;\n//     changeStatus: () => void;\n//     filter: string;\n//     setFilter: () => void;\n//     setError: () => void;\n//     filteredTasks: Array<TaskType>;\n//     changeFilter: () => void;\n// }\nexport const TodoAppContext = /*#__PURE__*/createContext({\n  tasks: [],\n  setTasks: () => null,\n  changeStatus: () => null,\n  filter: 'all',\n  setFilter: () => null,\n  setError: () => null,\n  filteredTasks: [],\n  changeFilter: () => null\n});\nconst TodoAppProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const getLocalstorage = () => {\n    let taska = window.localStorage.getItem(\"tasks\");\n    console.log(taska);\n    if (taska) {\n      return taska = JSON.parse(localStorage.getItem('tasks') || '[]');\n    } else {\n      return [];\n    }\n  };\n  const [tasks, setTasks] = useState(getLocalstorage());\n  useEffect(() => {\n    if (tasks.length !== 0) {\n      localStorage.setItem('tasks', JSON.stringify(tasks));\n    } else {\n      localStorage.setItem('tasks', JSON.stringify([]));\n    }\n    setTasks(tasks);\n  }, [tasks]);\n  const [filter, setFilter] = useState(\"all\");\n  const [error, setError] = useState(false);\n  const changeStatus = (taskId, isDone) => {\n    const task = tasks.find(t => t.id === taskId);\n    if (task) {\n      task.isDone = !task.isDone;\n    }\n    setTasks([...tasks]);\n  };\n  let filteredTasks = tasks;\n  if (filter === 'active') {\n    filteredTasks = tasks.filter(t => t.isDone === false);\n  } else if (filter === 'completed') {\n    filteredTasks = tasks.filter(t => t.isDone === true);\n  }\n  function changeFilter(value) {\n    setFilter(value);\n  }\n  const contextValue = {\n    tasks,\n    setTasks,\n    changeStatus,\n    filter,\n    setFilter,\n    setError,\n    changeFilter,\n    filteredTasks\n  };\n  return /*#__PURE__*/_jsxDEV(TodoAppContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n};\n_s(TodoAppProvider, \"QNUnZfxOmHC3JlzWAJWE+yUhEW4=\");\n_c = TodoAppProvider;\nexport default TodoAppProvider;\nvar _c;\n$RefreshReg$(_c, \"TodoAppProvider\");","map":{"version":3,"names":["createContext","useEffect","useState","jsxDEV","_jsxDEV","TodoAppContext","tasks","setTasks","changeStatus","filter","setFilter","setError","filteredTasks","changeFilter","TodoAppProvider","_ref","_s","children","getLocalstorage","taska","window","localStorage","getItem","console","log","JSON","parse","length","setItem","stringify","error","taskId","isDone","task","find","t","id","value","contextValue","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/olek/Desktop/Coding/todo-list-with-context/src/contexts/todo-app.context.tsx"],"sourcesContent":["import { Dispatch, ReactNode, SetStateAction, createContext, useEffect, useState } from \"react\";\nimport { TaskType } from \"../global-types\";\n\ntype TodoAppProviderType = {\n    children: ReactNode;\n}\n\n// type TodoAppContextType = {\n//     tasks: Array<TaskType>;\n//     setTasks: () => void;\n//     changeStatus: () => void;\n//     filter: string;\n//     setFilter: () => void;\n//     setError: () => void;\n//     filteredTasks: Array<TaskType>;\n//     changeFilter: () => void;\n// }\nexport const TodoAppContext = createContext({\n    tasks: [],\n    setTasks: () => null,\n    changeStatus: () => null,\n    filter: 'all',\n    setFilter: () => null,\n    setError: () => null,\n    filteredTasks: [],\n    changeFilter: () => null\n});\n\nconst TodoAppProvider: React.FC<TodoAppProviderType> = ({children}) => {\n\n    const getLocalstorage = () => {\n\t\tlet taska = window.localStorage.getItem(\"tasks\");\n\n\t\tconsole.log(taska);\n\t\tif(taska) {\n\t\t\treturn (taska = JSON.parse(localStorage.getItem('tasks') || '[]'));\n\t\t} else { \n\t\t\treturn [] \n\t\t}\n\t\t\n\t}\n    const [tasks, setTasks] = useState(getLocalstorage());\n\n    useEffect(() => {\n\t\tif(tasks.length !== 0) {\n\t\t\tlocalStorage.setItem('tasks', JSON.stringify(tasks));\n\t\t} else {\n\t\t\tlocalStorage.setItem('tasks', JSON.stringify([]));\n\t\t}\n\t\tsetTasks(tasks);\n\t}, [tasks]);\n\n    const [ filter, setFilter ] = useState(\"all\");\n\tconst [ error, setError ] = useState(false);\n\n    \n    const changeStatus = (taskId: string, isDone: boolean) => {\n        const task = tasks.find((t: any) => t.id === taskId);\n            if (task) {\n                task.isDone = !task.isDone;\n            }\n        setTasks([...tasks]);\n    };\n\t\n\n    let filteredTasks = tasks;\n        if(filter === 'active') {\n            filteredTasks = tasks.filter((t) => t.isDone === false);\n\t\t} else if (filter === 'completed') {\n\t\t    filteredTasks = tasks.filter((t) => t.isDone === true);\n\t\t}\n\n\t\tfunction changeFilter(value: string) {\n\t\t\tsetFilter(value);\n\t\t}\n\n    const contextValue = {\n        tasks, \n        setTasks, \n        changeStatus,\n        filter,\n        setFilter,\n        setError,\n        changeFilter,\n        filteredTasks,\n    };\n\n    return (\n        <TodoAppContext.Provider value={contextValue}>{children}</TodoAppContext.Provider>\n    )\n}\n\nexport default TodoAppProvider;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}